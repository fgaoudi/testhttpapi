{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project testhttpapi. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    }
  },
  "Outputs": {
    "httpApigmonapithhpRouteGET": {
      "Description": "URL of monapithhp/:GET endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "httpApigmonapithhp"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com",
            "",
            "/"
          ]
        ]
      }
    },
    "testhttpapi": {
      "Description": "ARN of Lambda function testhttpapi",
      "Value": {
        "Fn::GetAtt": [
          "testhttpapi",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "httpApigmonapithhp": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Description": "An HTTP API generated by Sigma",
        "Name": "monapithhp",
        "ProtocolType": "HTTP"
      }
    },
    "httpApigmonapithhpStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "httpApigmonapithhp"
        },
        "Description": "Stage of API",
        "StageName": "$default",
        "AutoDeploy": true
      }
    },
    "testhttpapi": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "testhttpapi",
        "Description": "Invokes functions defined in testhttpapi.js in project testhttpapi. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "testhttpapi.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "testhttpapiExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "testhttpapiExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "httpApigmonapithhpIntegrationtesthttpapi": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "httpApigmonapithhp"
        },
        "Description": "Integration of function: testhttpapi to HTTP API: monapithhp",
        "IntegrationType": "AWS_PROXY",
        "PayloadFormatVersion": "2.0",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "testhttpapi",
            "Arn"
          ]
        }
      }
    },
    "httpApigmonapithhpRouteGET": {
      "Type": "AWS::ApiGatewayV2::Route",
      "DependsOn": [
        "httpApigmonapithhpIntegrationtesthttpapi"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "httpApigmonapithhp"
        },
        "RouteKey": "GET /",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "httpApigmonapithhpIntegrationtesthttpapi"
              }
            ]
          ]
        }
      }
    },
    "httpApigmonapithhpRouteGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "testhttpapi"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "GET",
              "__Path__": "/",
              "__ApiId__": {
                "Ref": "httpApigmonapithhp"
              }
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "cweCloudwatchPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "testhttpapi"
        },
        "SourceArn": "arn:aws:events:us-east-1:173594419464:rule/Cloudwatch",
        "Principal": "events.amazonaws.com"
      }
    },
    "cweCloudwatchCli0testhttpapi": {
      "Type": "Custom::cli2cloudformation",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "cli2cloudformationtesthttpapi",
            "Arn"
          ]
        },
        "CliCommandCreate": {
          "Fn::Join": [
            "",
            [
              "aws events enable-rule --name Cloudwatch --event-bus-name default\naws events put-targets --rule Cloudwatch --event-bus-name default --targets \"Id=cweCloudwatchTarget,Arn=",
              {
                "Fn::GetAtt": [
                  "testhttpapi",
                  "Arn"
                ]
              },
              "\""
            ]
          ]
        },
        "CliCommandDelete": "aws events remove-targets --rule Cloudwatch --event-bus-name default --ids cweCloudwatchTarget",
        "CliCommandUpdate": {
          "Fn::Join": [
            "",
            [
              "aws events enable-rule --name Cloudwatch --event-bus-name default\naws events put-targets --rule Cloudwatch --event-bus-name default --targets \"Id=cweCloudwatchTarget,Arn=",
              {
                "Fn::GetAtt": [
                  "testhttpapi",
                  "Arn"
                ]
              },
              "\""
            ]
          ]
        }
      }
    },
    "cli2cloudformationtesthttpapi": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "cli2cloudformationtesthttpapi",
        "Description": "This is a utility lambda generated by Sigma, for bringing CF-unsupported operations into the CF template. Kudos to https://github.com/lucioveloso/cli2cloudformation",
        "Code": {
          "S3Bucket": "resources.us-east-1.sigma.slappforge.com",
          "S3Key": "CF/cf_shell_v2.zip"
        },
        "MemorySize": 128,
        "Handler": "index.lambda_handler",
        "Timeout": 60,
        "Runtime": "python3.8",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "cli2cloudformationtesthttpapiExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "cli2cloudformationtesthttpapiExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "cli2cloudformationtesthttpapiPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutTargets",
                    "events:EnableRule",
                    "events:RemoveTargets"
                  ],
                  "Resource": "arn:aws:events:us-east-1:173594419464:rule/Cloudwatch"
                }
              ]
            }
          }
        ]
      }
    }
  }
}